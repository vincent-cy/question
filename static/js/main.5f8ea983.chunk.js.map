{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["radioStyle","display","height","lineHeight","QuestionCard","props","setStep","useState","loading","setLoading","size","onFinish","values","axios","method","url","data","useInfo","answer","then","res","catch","err","message","error","wrapperCol","span","layout","DATA","questions","map","item","index","type","title","question","Item","name","key","label","rules","required","Group","options","option","value","slice","style","justifyContent","htmlType","spinning","delay","BaseInfoCard","setUserInfo","alt","width","src","address","toString","paddingTop","color","placeholder","maxLength","organization","pattern","App","step","setStep1","Component","Result","bind","status","className","flex","e","window","scrollTo","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5f8ea983.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport DATA from './data.json'\nimport axios from 'axios'\nimport {\n  Button, Radio, Cascader, Spin, Layout,\n  Checkbox, Form, Input, Col, Result, message, Row\n} from 'antd';\n\nconst isDev = process.env.NODE_ENV === \"development\"\nconst baseApi = isDev ? '/api' : 'http://101.200.182.153:3000/api'\n\nconst radioStyle = {\n  display: 'block',\n  height: '30px',\n  lineHeight: '30px',\n};\n\nfunction QuestionCard(props) {\n  const { setStep } = props\n  const [loading, setLoading] = useState(false)\n  const onFinish = values => {\n    if(loading) return \n    setLoading(true)\n    axios({\n      method: 'post',\n      url: `${baseApi}/a/answer`,\n      data: {\n        ...props.useInfo,\n        answer: values\n      }\n    }).then(res => {\n      setLoading(false)\n      setStep(2)\n    }).catch(err => {\n      setLoading(false)\n      message.error('提交错误，请重新提交');\n    })\n  };\n\n  return <Form\n    size=\"large\"\n    onFinish={onFinish}\n    wrapperCol={{\n      span: 24,\n    }}\n    layout=\"vertical\"\n  >\n    {\n      DATA.questions.map((item, index) => {\n        let type = ''\n        switch (item.type) {\n          case 1:\n            type = '(单选题)'\n            break;\n          case 2:\n            type = '(多选题)'\n            break;\n          case 3:\n            type = '(判断题)'\n            break;\n\n          default:\n            type = '(单选题)'\n            break;\n        }\n        const title = `${index + 1}. ${type}${item.question}`\n        return <Form.Item\n          name={`answer${index + 1}`}\n          key={item.question}\n          label={title}\n          rules={[{ required: !isDev, message: `请完成${index + 1}的答案。` }]}\n        >\n          {\n            item.type === 2 ? <Checkbox.Group>\n              {\n                item.options.map(option => <Row key={option} ><Checkbox key={option}\n                  value={option.slice(0, 1)}>{option}</Checkbox>\n                </Row>\n                )\n              }\n            </Checkbox.Group> : <Radio.Group>\n                {\n                  item.options.map(option => <Radio key={option}\n                    style={radioStyle} value={option.slice(0, 1)}>{option}</Radio>)\n                }\n              </Radio.Group>\n          }\n\n        </Form.Item>\n      })\n\n    }\n    <Form.Item>\n      <div style={{display:'flex', justifyContent: 'center'}}> \n        <Button type=\"primary\" htmlType=\"submit\"   >\n          提交答案\n        </Button>\n      </div>\n    </Form.Item>\n    <Spin spinning={loading} delay={500}></Spin>\n  </Form>\n}\n\nfunction BaseInfoCard(props) {\n  const { setUserInfo, setStep } = props\n  const onFinish = values => {\n    setStep(1)\n    setUserInfo({ ...values, address: values.address.toString() })\n  };\n  return <Layout>\n    <img alt='banner' width='100%' src={'https://static.poogln.com/banner.png'} />\n    <Form\n      size=\"large\"\n      onFinish={onFinish}\n      wrapperCol={{\n        span: 24,\n      }}\n      layout=\"vertical\"\n    >\n      <h1 style={{\n        height: 40,\n        paddingTop: 10,\n        color: '#1890ff'\n      }} >基本信息</h1>\n      <Form.Item label=\"姓名\"\n        rules={[{ required: true, message: '请输入您的姓名！' }]} name=\"name\">\n        <Input placeholder=\"请输入姓名\" maxLength={8} />\n      </Form.Item>\n\n      <Form.Item label=\"所在乡镇、社区\" rules={[{ required: true, message: '请选择您的单位或地区！' }]} name=\"address\">\n        <Cascader placeholder={'请选择'} options={DATA.organization} />\n      </Form.Item>\n\n      <Form.Item label=\"手机号码:\" rules={[{\n        required: true,\n        pattern: /^1[3|4|5|7|8][0-9]\\d{8}$/,\n        message: '请输入正确的手机号码！'\n      }]} name=\"phoneNumber\">\n        <Input placeholder=\"请输入手机号码\" />\n      </Form.Item>\n\n\n      <Form.Item>\n        <div style={{display:'flex', justifyContent: 'center'}}> \n          <Button type=\"primary\" htmlType=\"submit\"  >\n              开始答题\n          </Button>\n        </div>\n      </Form.Item>\n    </Form>\n  </Layout>\n}\n\nfunction App() {\n  // const [showAnswer, setShow] = useState(false)\n  const [useInfo, setUserInfo] = useState({})\n  const [step, setStep1] = useState(0)\n  const setStep = e => {\n    window.scrollTo(0, 0);\n    setStep1(e)\n  }\n  let Component = BaseInfoCard\n  switch (step) {\n    case 0:\n      Component = BaseInfoCard\n      break\n    case 1:\n      Component = QuestionCard\n      break\n    case 2:\n      Component = Result.bind(null, { status: 'success', title: \"提交数据成功！\" })\n\n      break\n    default:\n      Component = Component = BaseInfoCard\n      break\n  }\n  return (\n    <div className=\"App\">\n      <Row>\n        <Col flex={4}></Col>\n        <Component setUserInfo={setUserInfo} useInfo={useInfo} setStep={setStep} />\n        <Col flex={4}></Col>\n      </Row>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}